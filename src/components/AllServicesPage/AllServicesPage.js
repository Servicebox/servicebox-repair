// app/services/page.js
'use client';

import { useState, useEffect, useMemo } from 'react';
import { motion } from 'framer-motion';
import Image from 'next/image';

import BookingForm from "../../components/BookingForm/BookingForm";

const AllServicesPage = () => {
    const [services, setServices] = useState([]);
    const [filteredServices, setFilteredServices] = useState([]);
    const [searchQuery, setSearchQuery] = useState('');
    const [selectedCategory, setSelectedCategory] = useState('–í—Å–µ');
    const [categories, setCategories] = useState([]);
    const [loading, setLoading] = useState(true);
    const [activeService, setActiveService] = useState(null);
    const [isBookingFormOpen, setIsBookingFormOpen] = useState(false);
    const [selectedService, setSelectedService] = useState(null);

    // –î–∞–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å –∞–±—Å–æ–ª—é—Ç–Ω—ã–º–∏ –ø—É—Ç—è–º–∏
    const categoryData = {
        '–ù–æ—É—Ç–±—É–∫': { icon: "/images/notebook.webp", color: '#4e73df', name: '–ù–æ—É—Ç–±—É–∫–∏' },
        '–ú–æ–Ω–æ–±–ª–æ–∫': { icon: "/images/monoblok.webp", color: '#1cc88a', name: '–ö–æ–º–ø—å—é—Ç–µ—Ä—ã –∏ –º–æ–Ω–æ–±–ª–æ–∫–∏' },
        '–ê–ø–ø–ª': { icon: "/images/apple.webp", color: '#36b9cc', name: 'Apple —Ç–µ—Ö–Ω–∏–∫–∞' },
        '–¢–µ–ª–µ—Ñ–æ–Ω': { icon: "/images/android.webp", color: '#f6c23e', name: '–¢–µ–ª–µ—Ñ–æ–Ω—ã' },
        '–ü–ª–∞–Ω—à–µ—Ç—ã': { icon: "/images/tablet.webp", color: '#e74a3b', name: '–ü–ª–∞–Ω—à–µ—Ç—ã' },
        '–¢–µ–ª–µ–≤–∏–∑–æ—Ä': { icon: "/images/tv.webp", color: '#6f42c1', name: '–¢–µ–ª–µ–≤–∏–∑–æ—Ä—ã' },
        '–ó–∞–º–µ–Ω–∞ —Å—Ç–µ–∫–ª–∞': { icon: "/images/glass.webp", color: '#fd7e14', name: '–ó–∞–º–µ–Ω–∞ —Å—Ç–µ–∫–ª–∞' },
        '–í–∏–¥–µ–æ–∫–∞—Ä—Ç—ã': { icon: "/images/videocard.webp", color: '#20c997', name: '–í–∏–¥–µ–æ–∫–∞—Ä—Ç—ã' },
        '–î—Ä—É–≥–∏–µ': { icon: "/images/Devices.webp", color: '#6610f2', name: '–î—Ä—É–≥–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞' },
        '–ó–∞–º–µ–Ω–∞ –ø–µ—Ä–µ–¥–Ω–µ–≥–æ —Å—Ç–µ–∫–ª–∞ –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞—Ö': { icon: "/images/glass.webp", color: '#e83e8c', name: '–ó–∞–º–µ–Ω–∞ —Å—Ç–µ–∫–ª–∞' }
    };

    // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ —É—Å–ª—É–≥ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    const groupedServices = useMemo(() => {
        const groups = {};
        
        filteredServices.forEach(service => {
            const category = service.category || '–î—Ä—É–≥–∏–µ';
            if (!groups[category]) {
                groups[category] = [];
            }
            groups[category].push(service);
        });
        
        return groups;
    }, [filteredServices]);

    // –ó–∞–≥—Ä—É–∑–∫–∞ —É—Å–ª—É–≥
    useEffect(() => {
        const fetchServices = async () => {
            try {
                const response = await fetch('/api/service');
                const data = await response.json();
                
                // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö —É—Å–ª—É–≥
                const validServices = data.filter(service => 
                    service.serviceName && service.description
                );
                
                setServices(validServices);
                setFilteredServices(validServices);
                
                // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
                const uniqueCategories = [...new Set(validServices.map(s => s.category || '–î—Ä—É–≥–∏–µ'))];
                setCategories(['–í—Å–µ', ...uniqueCategories]);
                setLoading(false);
            } catch (error) {
                console.error('Error fetching services:', error);
                setLoading(false);
            }
        };

        fetchServices();
    }, []);

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    useEffect(() => {
        let result = services;
        
        if (selectedCategory !== '–í—Å–µ') {
            result = result.filter(service => 
                service.category === selectedCategory
            );
        }
        
        if (searchQuery) {
            const query = searchQuery.toLowerCase();
            result = result.filter(service => {
                const name = service.serviceName?.toLowerCase() || '';
                const desc = service.description?.toLowerCase() || '';
                return name.includes(query) || desc.includes(query);
            });
        }
        
        setFilteredServices(result);
    }, [searchQuery, selectedCategory, services]);

    const handleBookingClick = (service, e) => {
        e.stopPropagation();
        setSelectedService(service);
        setIsBookingFormOpen(true);
    };

    const handleBookingSuccess = (bookingData) => {
        alert(`–ó–∞–ø–∏—Å—å —Å–æ–∑–¥–∞–Ω–∞! –í–∞—à –∫–æ–¥: ${bookingData.trackingCode}`);
        setIsBookingFormOpen(false);
    };

    const formatPrice = (price) => {
        if (!price) return '';
        if (price.includes('‚ÇΩ') || price.includes('—Ä—É–±')) return price;
        return `${price} ‚ÇΩ`;
    };

    // –ê–Ω–∏–º–∞—Ü–∏–∏
    const container = {
        hidden: { opacity: 0 },
        show: {
            opacity: 1,
            transition: {
                staggerChildren: 0.1
            }
        }
    };

    const item = {
        hidden: { opacity: 0, y: 20 },
        show: { opacity: 1, y: 0 }
    };

    if (loading) {
        return (
            <motion.div className={styles.servicePricePage}>
                <div className={styles.loadingContainer}>
                    <div className={styles.loadingSpinner}></div>
                    <p>–ó–∞–≥—Ä—É–∂–∞–µ–º —É—Å–ª—É–≥–∏...</p>
                </div>
            </motion.div>
        );
    }

    return (
        <motion.div
            className={styles.servicePricePage}
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            transition={{ duration: 0.5 }}
        >
            <div className={styles.animatedTitle}>
                <motion.h1
                    initial={{ y: -20, opacity: 0 }}
                    animate={{ y: 0, opacity: 1 }}
                    transition={{ delay: 0.1 }}
                >
                    –¶–µ–Ω—ã –Ω–∞ —É—Å–ª—É–≥–∏
                </motion.h1>
                <motion.p
                    initial={{ y: -20, opacity: 0 }}
                    animate={{ y: 0, opacity: 1 }}
                    transition={{ delay: 0.2 }}
                >
                    –ü—Ä–æ–∑—Ä–∞—á–Ω–æ–µ —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –±–µ–∑ —Å–∫—Ä—ã—Ç—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π
                </motion.p>
            </div>

            <div className={styles.controlsContainer}>
                <motion.div
                    className={styles.searchContainer}
                    initial={{ y: -20, opacity: 0 }}
                    animate={{ y: 0, opacity: 1 }}
                    transition={{ delay: 0.3 }}
                >
                    <input
                        type="text"
                        placeholder="üîç –ü–æ–∏—Å–∫ —É—Å–ª—É–≥–∏..."
                        value={searchQuery}
                        onChange={(e) => setSearchQuery(e.target.value)}
                        className={styles.searchInput}
                    />
                </motion.div>

                <motion.div
                    className={styles.categoryFilter}
                    initial={{ y: -20, opacity: 0 }}
                    animate={{ y: 0, opacity: 1 }}
                    transition={{ delay: 0.4 }}
                >
                    {categories.map(category => {
                        const displayData = categoryData[category] || {};
                        
                        return (
                            <motion.button
                                key={category}
                                className={`${styles.categoryBtn} ${selectedCategory === category ? styles.active : ''}`}
                                onClick={() => setSelectedCategory(category)}
                                whileHover={{ scale: 1.05 }}
                                whileTap={{ scale: 0.95 }}
                                style={{ 
                                    backgroundColor: selectedCategory === category 
                                        ? displayData.color || '#4e73df' 
                                        : 'transparent',
                                    borderColor: displayData.color || '#4e73df'
                                }}
                            >
                                {category === '–í—Å–µ' ? '–í—Å–µ' : (
                                    <>
                                        <span className={styles.categoryIcon}>
                                            {displayData.icon ? (
                                                <Image 
                                                    src={displayData.icon} 
                                                    alt={category} 
                                                    className={styles.categoryImg}
                                                    width={20}
                                                    height={20}
                                                    unoptimized // –î–æ–±–∞–≤–ª—è–µ–º –¥–ª—è WebP
                                                />
                                            ) : (
                                                'üìã'
                                            )}
                                        </span>
                                        <span className={styles.categoryText}>
                                            {displayData.name || category}
                                        </span>
                                    </>
                                )}
                            </motion.button>
                        );
                    })}
                </motion.div>
            </div>

            {filteredServices.length === 0 ? (
                <motion.div
                    className={styles.noResults}
                    initial={{ scale: 0.9, opacity: 0 }}
                    animate={{ scale: 1, opacity: 1 }}
                >
                    <h3>–£—Å–ª—É–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</h3>
                    <p>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∫—Ä–∏—Ç–µ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞ –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é</p>
                </motion.div>
            ) : (
                <div className={styles.servicesContainer}>
                    {Object.keys(groupedServices).map(category => {
                        const categoryServices = groupedServices[category];
                        const displayData = categoryData[category] || {};
                        
                        return (
                            <motion.div 
                                key={category}
                                className={styles.categoryGroup}
                                variants={container}
                                initial="hidden"
                                animate="show"
                            >
                                {selectedCategory === '–í—Å–µ' && (
                                    <div className={styles.categoryHeader}>
                                        <div className={styles.categoryIconTitle}>
                                            {displayData.icon ? (
                                                <Image 
                                                    src={displayData.icon} 
                                                    alt={category} 
                                                    className={styles.categoryTitleImg}
                                                    width={32}
                                                    height={32}
                                                    unoptimized // –î–æ–±–∞–≤–ª—è–µ–º –¥–ª—è WebP
                                                />
                                            ) : (
                                                <span className={styles.categoryIcon}>üìã</span>
                                            )}
                                            <h2 className={styles.categoryTitle}>
                                                {displayData.name || category}
                                            </h2>
                                        </div>
                                        <div 
                                            className={styles.categoryDivider}
                                            style={{ backgroundColor: displayData.color || '#4e73df' }}
                                        ></div>
                                    </div>
                                )}
                                
                                <motion.div 
                                    className={styles.servicesGrid}
                                    variants={container}
                                >
                                    {categoryServices.map(service => (
                                        <motion.div
                                            key={service._id}
                                            className={`${styles.serviceCard} ${activeService === service._id ? styles.active : ''}`}
                                            variants={item}
                                            onClick={() => setActiveService(activeService === service._id ? null : service._id)}
                                        >
                                            <div className={styles.cardHeader}>
                                                <h3>{service.serviceName}</h3>
                                                <span className={styles.priceTag}>
                                                    {formatPrice(service.price)}
                                                </span>
                                            </div>
                                            <div className={styles.cardBody}>
                                                <p className={styles.description}>{service.description}</p>
                                            </div>
                                            
                                            {activeService === service._id && (
                                                <motion.div 
                                                    className={styles.serviceDetails}
                                                    initial={{ height: 0, opacity: 0 }}
                                                    animate={{ height: 'auto', opacity: 1 }}
                                                    transition={{ duration: 0.3 }}
                                                    onClick={(e) => e.stopPropagation()}
                                                >
                                                    <div className={styles.serviceMeta}>
                                                        <span className={styles.categoryBadge}>
                                                            {displayData.icon ? (
                                                                <Image 
                                                                    src={displayData.icon} 
                                                                    alt={category} 
                                                                    className={styles.badgeIcon}
                                                                    width={16}
                                                                    height={16}
                                                                    unoptimized // –î–æ–±–∞–≤–ª—è–µ–º –¥–ª—è WebP
                                                                />
                                                            ) : (
                                                                'üìã'
                                                            )}
                                                            {displayData.name || service.category}
                                                        </span>
                                                    </div>
                                                    <div className={styles.serviceActions}>
                                                        <button 
                                                            className={styles.btnBook}
                                                            onClick={(e) => handleBookingClick(service, e)}
                                                        >
                                                            –ó–∞–ø–∏—Å–∞—Ç—å—Å—è
                                                        </button>
                                                    </div>
                                                </motion.div>
                                            )}
                                        </motion.div>
                                    ))}
                                </motion.div>
                            </motion.div>
                        );
                    })}
                </div>
            )}

            {isBookingFormOpen && (
                <BookingForm 
                    service={selectedService}
                    onClose={() => setIsBookingFormOpen(false)}
                    onBookingSuccess={handleBookingSuccess}
                />
            )}
        </motion.div>
    );
};

export default AllServicesPage;