// components/ImageGallerySection/ImageGallerySection.jsx
'use client';
import { useState, useEffect } from 'react';
import Image from 'next/image';
import './ImageGallerySection.module.css'; // –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å—Ç–∏–ª–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã

const ImageGallerySection = ({ galleryData }) => {
  const [images, setImages] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [selectedImage, setSelectedImage] = useState(null);
  const [view, setView] = useState('grid');
  const [imageErrors, setImageErrors] = useState({}); // –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ—à–∏–±–æ–∫ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—Ç–∏–Ω–æ–∫

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
  const formatFileSize = (bytes) => {
    if (!bytes || typeof bytes !== 'number' || bytes <= 0) return '–†–∞–∑–º–µ—Ä –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω';
    const units = ['–ë', '–ö–ë', '–ú–ë', '–ì–ë'];
    let size = bytes;
    let unitIndex = 0;
    while (size >= 1024 && unitIndex < units.length - 1) {
      size /= 1024;
      unitIndex++;
    }
    return `${size.toFixed(unitIndex === 0 ? 0 : 1)} ${units[unitIndex]}`;
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã
  const formatDate = (dateString) => {
    if (!dateString) return '–î–∞—Ç–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞';
    try {
      const date = new Date(dateString);
      return date.toLocaleDateString('ru-RU', {
        year: 'numeric',
        month: 'long',
        day: 'numeric',
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã:', error);
      return '–ù–µ–≤–µ—Ä–Ω–∞—è –¥–∞—Ç–∞';
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
  const handleImageError = (imageId) => {
    setImageErrors((prev) => ({
      ...prev,
      [imageId]: true,
    }));
  };

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å —É—á–µ—Ç–æ–º –æ—à–∏–±–æ–∫
  const getImageSource = (image) => {
    // –ï—Å–ª–∏ –¥–ª—è —ç—Ç–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –±—ã–ª–∞ –æ—à–∏–±–∫–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É
    if (imageErrors[image.id]) {
      return '/images/image-placeholder.svg'; // –£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ —Å–≤–æ–µ–π –∑–∞–≥–ª—É—à–∫–µ
    }
    return image.filePath;
  };

  useEffect(() => {
    if (galleryData && galleryData.images) {
      // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏
      const validatedImages = galleryData.images.map((img) => ({
        id: img.id || `temp-${Date.now()}-${Math.random()}`,
        filename: img.filename || 'unknown',
        originalName: img.originalName || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–∞–π–ª',
        filePath: img.filePath || '/images/placeholder.jpg',
        description: img.description || '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç',
        uploadedAt: img.uploadedAt || new Date().toISOString(),
        size: typeof img.size === 'number' ? img.size : 0,
        type: img.type || 'image/jpeg',
      }));
      setImages(validatedImages);
      setLoading(false);
    } else {
      fetchImages();
    }
  }, [galleryData]);

  // –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ (fetchImages, openModal, closeModal...) –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
  // –ù–æ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤ –Ω–∏—Ö formatFileSize –∏ formatDate –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö

  return (
    <section className="image-gallery-section">
      <div className="container">
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–∞ —Ä—É—Å—Å–∫–æ–º */}
        <div className="gallery-header">
          <h2 className="section-title">–ì–∞–ª–µ—Ä–µ—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π</h2>
          <p className="section-subtitle">–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –Ω–∞—à—É –∫–æ–ª–ª–µ–∫—Ü–∏—é —Ä–∞–±–æ—Ç</p>
        </div>

        {/* –°–µ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π */}
        {images.length === 0 ? (
          <div className="empty-gallery">
            <div className="empty-icon">üì∑</div>
            <h3>–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–æ–∫–∞ –Ω–µ—Ç</h3>
            <p>–ë—É–¥—å—Ç–µ –ø–µ—Ä–≤—ã–º, –∫—Ç–æ –¥–æ–±–∞–≤–∏—Ç —Ä–∞–±–æ—Ç—É –≤ –≥–∞–ª–µ—Ä–µ—é!</p>
          </div>
        ) : (
          <div className="gallery-grid">
            {images.map((image) => (
              <div key={image.id} className="gallery-item">
                <div className="image-wrapper">
                  {/* –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–≥ img –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ */}
                  <img
                    src={getImageSource(image)}
                    alt={image.description}
                    className="gallery-image"
                    onError={() => handleImageError(image.id)}
                  />
                </div>
                <div className="image-info">
                  <p className="image-description">{image.description}</p>
                  <div className="image-meta">
                    {/* –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è */}
                    <span className="file-type">{image.type?.split('/')[1]?.toUpperCase() || '–ò–ó–û–ë–†'}</span>
                    <span className="file-size">{formatFileSize(image.size)}</span>
                  </div>
                  <div className="upload-date">{formatDate(image.uploadedAt)}</div>
                </div>
              </div>
            ))}
          </div>
        )}
      </div>
    </section>
  );
};

export default ImageGallerySection;