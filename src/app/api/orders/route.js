// app/api/orders/route.js
import { NextResponse } from 'next/server';
import { getServerSession } from '@/lib/session';
import Order from '@/models/Order';
import Product from '@/models/Product';
import ProductReservation from '@/models/ProductReservation';
import dbConnect from '@/lib/db';

// app/api/orders/route.js - –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è POST —Ñ—É–Ω–∫—Ü–∏—è
export async function POST(request) {
  try {
    await dbConnect();
    
    const session = await getServerSession(request);
    console.log('üîê Session in order creation:', session);
    
    if (!session) {
      return NextResponse.json({ error: '–ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' }, { status: 401 });
    }

    const orderData = await request.json();
    console.log('üì¶ Order data received:', orderData);
    
    if (!orderData.products || orderData.products.length === 0) {
      return NextResponse.json({ error: '–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞' }, { status: 400 });
    }

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞, –µ—Å–ª–∏ –æ–Ω –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω
    if (!orderData.orderNumber) {
      const now = new Date();
      const timestamp = now.getTime();
      const random = Math.floor(Math.random() * 10000);
      orderData.orderNumber = `ORD-${timestamp}-${random}`;
      console.log(`‚úÖ Auto-generated order number: ${orderData.orderNumber}`);
    }

    console.log('üîÑ Checking product availability...');
    for (const item of orderData.products) {
      console.log(`üìã Checking product: ${item.name}, quantity: ${item.quantity}`);
      
      const product = await Product.findOne({ slug: item.slug });
      if (!product) {
        return NextResponse.json({ 
          error: `–¢–æ–≤–∞—Ä "${item.name}" –Ω–µ –Ω–∞–π–¥–µ–Ω` 
        }, { status: 404 });
      }
      
      console.log(`üìä Product ${item.slug} current quantity: ${product.quantity}, requested: ${item.quantity}`);
      
      if (product.quantity < item.quantity) {
        return NextResponse.json({ 
          error: `–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–≤–∞—Ä–∞ "${item.name}". –î–æ—Å—Ç—É–ø–Ω–æ: ${product.quantity}, –∑–∞–ø—Ä–æ—à–µ–Ω–æ: ${item.quantity}` 
        }, { status: 400 });
      }

      // –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞
      console.log(`‚ûñ Reducing quantity for ${item.slug} from ${product.quantity} to ${product.quantity - item.quantity}`);
      product.quantity -= item.quantity;
      await product.save();
      console.log(`‚úÖ Quantity updated for ${item.slug}`);
    }

    console.log('üìù Creating order...');
    const order = await Order.create({
      userId: session.userId,
      ...orderData,
      status: 'pending',
      paymentStatus: orderData.paymentMethod === 'cash' ? 'pending' : 'pending'
    });

    console.log('‚úÖ Order created:', order._id);

    // –û—á–∏—â–∞–µ–º —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞
    console.log('üóëÔ∏è Clearing reservations...');
    const deletedReservations = await ProductReservation.deleteMany({
      userId: session.userId,
      status: 'reserved'
    });
    console.log(`‚úÖ Removed ${deletedReservations.deletedCount} reservations`);

    return NextResponse.json({ 
      success: true, 
      order,
      message: '–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω' 
    });
  } catch (error) {
    console.error('Error creating order:', error);
    return NextResponse.json(
      { error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞: ' + error.message },
      { status: 500 }
    );
  }
}

export async function GET(request) {
  try {
    await dbConnect();
    
    const session = await getServerSession(request);
    console.log('üîê Session in orders GET:', session);
    
    if (!session) {
      return NextResponse.json({ orders: [] }, { status: 200 });
    }

    const url = new URL(request.url);
    const status = url.searchParams.get('status');
    const page = parseInt(url.searchParams.get('page')) || 1;
    const limit = 10;
    const skip = (page - 1) * limit;

    // –î–ª—è –∞–¥–º–∏–Ω–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –∑–∞–∫–∞–∑—ã, –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π - —Ç–æ–ª—å–∫–æ –∏—Ö
    let query = {};
    if (session.role !== 'admin') {
      query.userId = session.userId;
    }
    
    if (status && status !== 'all') {
      query.status = status;
    }

    console.log('üìã Fetching orders with query:', query);
    const orders = await Order.find(query)
      .sort({ createdAt: -1 })
      .skip(skip)
      .limit(limit);

    const totalOrders = await Order.countDocuments(query);
    console.log(`‚úÖ Found ${orders.length} orders out of ${totalOrders} total`);

    return NextResponse.json({ 
      orders,
      pagination: {
        currentPage: page,
        totalPages: Math.ceil(totalOrders / limit),
        totalOrders
      }
    });
  } catch (error) {
    console.error('‚ùå Error fetching orders:', error);
    return NextResponse.json(
      { error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–∫–∞–∑–æ–≤' },
      { status: 500 }
    );
  }
}