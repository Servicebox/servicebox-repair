import { NextResponse } from 'next/server';
import dbConnect from '@/lib/db';
import User from '@/models/User';
import crypto from 'crypto';
import { sendVerificationEmail } from '@/lib/email';

export async function POST(request) {
  try {
    await dbConnect();
    console.log('üîß === STARTING USER REGISTRATION ===');

    const { username, email, password, phone } = await request.json();
    console.log('üìù Registration data received:', { 
      username, 
      email, 
      phone: phone ? '***' : 'missing',
      password: password ? '***' : 'missing'
    });

    if (!username || !email || !password || !phone) {
      console.log('‚ùå Missing required fields');
      return NextResponse.json(
        { message: '–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è' },
        { status: 400 }
      );
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ç–∞–∫–∏–º email
    const existingUser = await User.findOne({ email: email.toLowerCase().trim() });
    if (existingUser) {
      console.log('‚ùå User already exists:', email);
      return NextResponse.json(
        { message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' },
        { status: 400 }
      );
    }

    // –°–û–ó–î–ê–ï–ú –¢–û–ö–ï–ù –ù–ê–ü–†–Ø–ú–£–Æ (–±–µ–∑ –º–µ—Ç–æ–¥–∞ –º–æ–¥–µ–ª–∏)
    const verificationToken = crypto.randomBytes(32).toString('hex');
    const verificationTokenExpires = new Date(Date.now() + 24 * 60 * 60 * 1000); // 24 —á–∞—Å–∞

    console.log('üîê Verification token created:', verificationToken);
    console.log('üîê Token expires:', verificationTokenExpires);

    // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ç–æ–∫–µ–Ω–æ–º
    const user = new User({
      username: username.trim(),
      email: email.toLowerCase().trim(),
      password,
      phone: phone.trim(),
      verificationToken,
      verificationTokenExpires,
    });

    console.log('üë§ User instance created:', user._id);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log('üíæ Saving user to database...');
    await user.save();
    console.log('‚úÖ User saved successfully');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–æ–∫–µ–Ω –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏–ª—Å—è
    const savedUser = await User.findById(user._id);
    console.log('üîç Verification after save:');
    console.log(`   - Token: ${savedUser.verificationToken}`);
    console.log(`   - Expires: ${savedUser.verificationTokenExpires}`);
    console.log(`   - Token matches: ${savedUser.verificationToken === verificationToken}`);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email —Å —Å—Å—ã–ª–∫–æ–π –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    try {
      console.log('üìß Sending verification email...');
      await sendVerificationEmail(user.email, verificationToken, user.username);
      console.log('‚úÖ Verification email sent to:', user.email);
    } catch (emailError) {
      console.error('‚ùå Error sending verification email:', emailError);
      // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É –¥–∞–∂–µ –µ—Å–ª–∏ email –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª—Å—è
    }

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç–≤–µ—Ç –±–µ–∑ –ø–∞—Ä–æ–ª—è –∏ —Ç–æ–∫–µ–Ω–∞
    const userResponse = {
      id: user._id,
      username: user.username,
      email: user.email,
      phone: user.phone,
    };

    return NextResponse.json(
      { 
        message: '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à email –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.',
        user: userResponse
      },
      { status: 201 }
    );

  } catch (error) {
    console.error('‚ùå Signup error:', error);
    return NextResponse.json(
      { message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏' },
      { status: 500 }
    );
  }
}