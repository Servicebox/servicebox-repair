import { NextResponse } from 'next/server';
import dbConnect from '@/lib/db';
import Booking from '@/models/Booking';
import Service from '@/models/Service';

export async function POST(request) {
  await dbConnect();
  
  try {
    const { serviceId, serviceName, userName, userPhone, userEmail, deviceModel, notes } = await request.json();
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —É—Å–ª—É–≥–∏
    const serviceExists = await Service.findById(serviceId);
    if (!serviceExists) {
      return NextResponse.json(
        { message: '–£—Å–ª—É–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' },
        { status: 404 }
      );
    }

    const booking = new Booking({
      serviceId,
      serviceName,
      userName,
      userPhone,
      userEmail,
      deviceModel,
      notes,
      status: 'pending'
    });

    await booking.save();

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    if (process.env.BOT_TOKEN && process.env.CHAT_ID) {
      const telegramMsg = `üìù –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å!\n\n` +
        `üîß –£—Å–ª—É–≥–∞: ${booking.serviceName}\n` +
        `üë§ –ö–ª–∏–µ–Ω—Ç: ${booking.userName}\n` +
        `üì± –¢–µ–ª–µ—Ñ–æ–Ω: ${booking.userPhone}\n` +
        `üìß Email: ${booking.userEmail || '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n` +
        `üì± –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: ${booking.deviceModel || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}\n` +
        `üìù –ó–∞–º–µ—Ç–∫–∏: ${booking.notes}\n` +
        `üÜî –¢—Ä–µ–∫-–∫–æ–¥: ${booking.trackingCode}`;

      // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram
       await fetch(`https://api.telegram.org/bot${process.env.BOT_TOKEN}/sendMessage`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          chat_id: process.env.CHAT_ID,
          text: telegramMsg
         })
      });
    }

    return NextResponse.json(booking, { status: 201 });
  } catch (error) {
    console.error('Booking creation error:', error);
    return NextResponse.json(
      { message: error.message },
      { status: 400 }
    );
  }
}

export async function GET() {
  await dbConnect();
  
  try {
    const bookings = await Booking.find()
      .populate('serviceId')
      .sort({ createdAt: -1 });
    
    return NextResponse.json(bookings);
  } catch (error) {
    console.error('Get bookings error:', error);
    return NextResponse.json(
      { message: error.message },
      { status: 500 }
    );
  }
}