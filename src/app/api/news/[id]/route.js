// src/app/api/news/[id]/route.js
import { NextResponse } from 'next/server';
import dbConnect from '@/lib/db';
import News from '@/models/News';

export async function GET(request, { params }) {
  try {
    await dbConnect();

    // ‚úÖ –§–ò–ö–°: await params –ø–µ—Ä–µ–¥ –¥–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–∞—Ü–∏–µ–π
    const { id } = await params;

    console.log('üîç Fetching news with ID:', id);

    // ‚úÖ –§–ò–ö–°: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ undefined
    if (!id || id === 'undefined') {
      return NextResponse.json(
        { success: false, error: 'ID –Ω–æ–≤–æ—Å—Ç–∏ –Ω–µ —É–∫–∞–∑–∞–Ω' },
        { status: 400 }
      );
    }

    // ‚úÖ –§–ò–ö–°: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ ObjectId
    if (!/^[0-9a-fA-F]{24}$/.test(id)) {
      return NextResponse.json(
        { success: false, error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –Ω–æ–≤–æ—Å—Ç–∏' },
        { status: 400 }
      );
    }

    const news = await News.findById(id);

    if (!news) {
      return NextResponse.json(
        { success: false, error: '–ù–æ–≤–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' },
        { status: 404 }
      );
    }

    return NextResponse.json({
      success: true,
      data: news
    });
  } catch (error) {
    console.error('Error fetching news item:', error);

    if (error.name === 'CastError') {
      return NextResponse.json(
        { success: false, error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –Ω–æ–≤–æ—Å—Ç–∏' },
        { status: 400 }
      );
    }

    return NextResponse.json(
      { success: false, error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–æ–≤–æ—Å—Ç–∏' },
      { status: 500 }
    );
  }
}

export async function PUT(request, { params }) {
  try {
    await dbConnect();

    // ‚úÖ –§–ò–ö–°: await params –ø–µ—Ä–µ–¥ –¥–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–∞—Ü–∏–µ–π
    const { id } = await params;
    const updateData = await request.json();

    if (!id || id === 'undefined') {
      return NextResponse.json(
        { success: false, error: 'ID –Ω–æ–≤–æ—Å—Ç–∏ –Ω–µ —É–∫–∞–∑–∞–Ω' },
        { status: 400 }
      );
    }

    const news = await News.findByIdAndUpdate(
      id,
      updateData,
      { new: true, runValidators: true }
    );

    if (!news) {
      return NextResponse.json(
        { success: false, error: '–ù–æ–≤–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' },
        { status: 404 }
      );
    }

    return NextResponse.json({
      success: true,
      data: news
    });
  } catch (error) {
    console.error('Error updating news:', error);

    if (error.name === 'CastError') {
      return NextResponse.json(
        { success: false, error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –Ω–æ–≤–æ—Å—Ç–∏' },
        { status: 400 }
      );
    }

    return NextResponse.json(
      { success: false, error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–∏' },
      { status: 500 }
    );
  }
}

export async function DELETE(request, { params }) {
  try {
    await dbConnect();

    // ‚úÖ –§–ò–ö–°: await params –ø–µ—Ä–µ–¥ –¥–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–∞—Ü–∏–µ–π
    const { id } = await params;

    if (!id || id === 'undefined') {
      return NextResponse.json(
        { success: false, error: 'ID –Ω–æ–≤–æ—Å—Ç–∏ –Ω–µ —É–∫–∞–∑–∞–Ω' },
        { status: 400 }
      );
    }

    const news = await News.findByIdAndDelete(id);

    if (!news) {
      return NextResponse.json(
        { success: false, error: '–ù–æ–≤–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' },
        { status: 404 }
      );
    }

    return NextResponse.json({
      success: true,
      message: '–ù–æ–≤–æ—Å—Ç—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞'
    });
  } catch (error) {
    console.error('Error deleting news:', error);

    if (error.name === 'CastError') {
      return NextResponse.json(
        { success: false, error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –Ω–æ–≤–æ—Å—Ç–∏' },
        { status: 400 }
      );
    }

    return NextResponse.json(
      { success: false, error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–∏' },
      { status: 500 }
    );
  }
}