// app/api/admin/users/[userId]/route.js
import { NextResponse } from 'next/server';
import dbConnect from '@/lib/db';
import User from '@/models/User';
import jwt from 'jsonwebtoken';

export async function PUT(request, { params }) {
  try {
    const { userId } = params;
    console.log('=== UPDATE USER API CALLED ===', userId);

    await dbConnect();

    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ cookies –≤–º–µ—Å—Ç–æ —Å–µ—Å—Å–∏–∏
    const token = request.cookies.get('token')?.value;
    console.log('üîê Token in update user API:', token ? 'Present' : 'Missing');

    if (!token) {
      console.log('‚ùå No token found');
      return NextResponse.json({ message: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' }, { status: 401 });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω
    let decoded;
    try {
      decoded = jwt.verify(token, process.env.JWT_SECRET);
      console.log('üîì Decoded token in update user:', decoded);
    } catch (jwtError) {
      console.log('‚ùå Invalid token in update user:', jwtError.message);
      return NextResponse.json({ message: '–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω' }, { status: 401 });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
    if (decoded.role !== 'admin') {
      console.log('‚ùå User is not admin in update user');
      return NextResponse.json({ message: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω' }, { status: 403 });
    }

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞
    const body = await request.json();
    console.log('üì¶ Update data:', body);

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const updatedUser = await User.findByIdAndUpdate(
      userId,
      { $set: body },
      { new: true, runValidators: true }
    ).select('-password -refreshToken -verificationToken -resetPasswordToken');

    if (!updatedUser) {
      return NextResponse.json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' }, { status: 404 });
    }

    console.log('‚úÖ User updated successfully');

    return NextResponse.json({ user: updatedUser });

  } catch (error) {
    console.error('Update user error:', error);
    return NextResponse.json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' }, { status: 500 });
  }
}

// –¢–∞–∫–∂–µ –¥–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ –º–µ—Ç–æ–¥—ã –µ—Å–ª–∏ –Ω—É–∂–Ω–æ (GET, DELETE –∏ —Ç.–¥.)

export async function GET(request, { params }) {
  try {
    const { userId } = params;
    console.log('=== GET USER API CALLED ===', userId);

    await dbConnect();

    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ cookies
    const token = request.cookies.get('token')?.value;

    if (!token) {
      return NextResponse.json({ message: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' }, { status: 401 });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω
    try {
      const decoded = jwt.verify(token, process.env.JWT_SECRET);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
      if (decoded.role !== 'admin') {
        return NextResponse.json({ message: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω' }, { status: 403 });
      }

      // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const user = await User.findById(userId).select('-password -refreshToken -verificationToken -resetPasswordToken');

      if (!user) {
        return NextResponse.json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' }, { status: 404 });
      }

      return NextResponse.json({ user });

    } catch (jwtError) {
      return NextResponse.json({ message: '–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω' }, { status: 401 });
    }

  } catch (error) {
    console.error('Get user error:', error);
    return NextResponse.json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' }, { status: 500 });
  }
}

export async function DELETE(request, { params }) {
  try {
    const { userId } = params;
    console.log('=== DELETE USER API CALLED ===', userId);

    await dbConnect();

    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ cookies
    const token = request.cookies.get('token')?.value;

    if (!token) {
      return NextResponse.json({ message: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' }, { status: 401 });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω
    try {
      const decoded = jwt.verify(token, process.env.JWT_SECRET);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
      if (decoded.role !== 'admin') {
        return NextResponse.json({ message: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω' }, { status: 403 });
      }

      // –ù–µ –ø–æ–∑–≤–æ–ª—è–µ–º —É–¥–∞–ª–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è
      if (decoded.userId === userId) {
        return NextResponse.json({ message: '–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç' }, { status: 400 });
      }

      // –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const deletedUser = await User.findByIdAndDelete(userId);

      if (!deletedUser) {
        return NextResponse.json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' }, { status: 404 });
      }

      console.log('‚úÖ User deleted successfully');

      return NextResponse.json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω' });

    } catch (jwtError) {
      return NextResponse.json({ message: '–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω' }, { status: 401 });
    }

  } catch (error) {
    console.error('Delete user error:', error);
    return NextResponse.json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' }, { status: 500 });
  }
}