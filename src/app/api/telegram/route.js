import { NextResponse } from 'next/server';
import axios from 'axios';

// –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ—Ç–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ –≥—Ä—É–ø–ø—É
const BOT_TOKEN = process.env.NOTIFY_BOT_TOKEN;
const CHAT_ID = process.env.NOTIFY_CHAT_ID;

export async function POST(request) {
  try {
    console.log('Environment check:', {
      hasToken: !!BOT_TOKEN,
      hasChatId: !!CHAT_ID,
      tokenLength: BOT_TOKEN?.length,
      chatId: CHAT_ID
    });

    if (!BOT_TOKEN || !CHAT_ID) {
      console.error('Missing environment variables:', {
        BOT_TOKEN: BOT_TOKEN ? 'SET' : 'MISSING',
        CHAT_ID: CHAT_ID ? 'SET' : 'MISSING'
      });
      return NextResponse.json(
        { error: 'Bot token or chat ID not configured' }, 
        { status: 500 }
      );
    }

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–æ—Ä–º—ã
    const { name, phone, description, promotion } = await request.json();
    
    console.log('Received form data:', { name, phone, description, promotion });
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    if (!name || !phone) {
      return NextResponse.json(
        { 
          error: 'Missing required fields',
          required: ['name', 'phone'],
          received: { name, phone, description, promotion }
        },
        { status: 400 }
      );
    }

    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram
    const message = `üìù *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —Å —Å–∞–π—Ç–∞*\n\n` +
                   `üë§ *–ò–º—è:* ${name}\n` +
                   `üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* ${phone}\n` +
                   (description ? `üìã *–û–ø–∏—Å–∞–Ω–∏–µ:* ${description}\n` : '') +
                   (promotion ? `üéÅ *–ê–∫—Ü–∏—è:* ${promotion}\n` : '') +
                   `\n‚è∞ *–í—Ä–µ–º—è:* ${new Date().toLocaleString('ru-RU')}`;

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
    const telegramResponse = await axios.post(
      `https://api.telegram.org/bot${BOT_TOKEN}/sendMessage`,
      {
        chat_id: CHAT_ID,
        text: message,
        parse_mode: 'Markdown'
      },
      {
        timeout: 10000,
        headers: {
          'Content-Type': 'application/json'
        }
      }
    );

    console.log('Telegram API response:', telegramResponse.data);

    return NextResponse.json({ 
      success: true, 
      message: '–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞',
      messageId: telegramResponse.data.result?.message_id
    });

  } catch (error) {
    console.error('Telegram send error details:', {
      message: error.message,
      response: error.response?.data,
      status: error.response?.status
    });

    let errorMessage = 'Failed to send message to Telegram';
    let statusCode = 500;

    if (error.response) {
      errorMessage = `Telegram API error: ${error.response.data.description || 'Unknown error'}`;
      statusCode = error.response.status;
    } else if (error.request) {
      errorMessage = 'No response received from Telegram API';
    }

    return NextResponse.json(
      { 
        success: false,
        error: errorMessage
      },
      { status: statusCode }
    );
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è GET –∑–∞–ø—Ä–æ—Å–æ–≤ (—Ç–æ—Ç —Å–∞–º—ã–π –∫–æ—Ç–æ—Ä—ã–π –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç "Hello telegram!")
export async function GET() {
  return NextResponse.json({
    message: "Hello telegram!",
    usage: "Send POST request with form data to submit an application"
  });
}